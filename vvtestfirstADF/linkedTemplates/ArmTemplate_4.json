{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "vvtestfirstADF"
		},
		"source1_subsequentload_properties_pl_master_orch_jdbc_parameters_sourcename": {
			"type": "string",
			"defaultValue": "source1"
		},
		"source1_subsequentload_properties_pl_master_orch_jdbc_parameters_firstload": {
			"type": "string",
			"defaultValue": "F"
		},
		"source1_subsequentload_properties_pl_master_orch_jdbc_parameters_retryfailedflag": {
			"type": "string",
			"defaultValue": "F"
		},
		"source1_trigger_firstload_properties_pl_master_orch_jdbc_parameters_sourcename": {
			"type": "string",
			"defaultValue": "source1"
		},
		"source1_trigger_firstload_properties_pl_master_orch_jdbc_parameters_firstload": {
			"type": "string",
			"defaultValue": "T"
		},
		"source1_trigger_firstload_properties_pl_master_orch_jdbc_parameters_retryfailedflag": {
			"type": "string",
			"defaultValue": "F"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_fulload_jdbc_sql_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate execution date",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "execution_date",
							"value": {
								"value": "@formatDateTime(utcNow(),'yyyy-MM-dd-hh-mm-ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Trigger Fulload JDBC",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate execution date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fullload_jdbc_sql_child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"url": {
									"value": "@pipeline().parameters.url",
									"type": "Expression"
								},
								"username": {
									"value": "@pipeline().parameters.username",
									"type": "Expression"
								},
								"password": {
									"value": "@pipeline().parameters.password",
									"type": "Expression"
								},
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"tablename": {
									"value": "@pipeline().parameters.tablename",
									"type": "Expression"
								},
								"storageAccount": {
									"value": "@pipeline().parameters.storageAccount",
									"type": "Expression"
								},
								"fileSystem": {
									"value": "@pipeline().parameters.fileSystem",
									"type": "Expression"
								},
								"directory": {
									"value": "@pipeline().parameters.directory",
									"type": "Expression"
								},
								"blobPartitionColumn": {
									"value": "@pipeline().parameters.partitionColname",
									"type": "Expression"
								},
								"executionDate": {
									"value": "@variables('execution_date')",
									"type": "Expression"
								},
								"database": {
									"value": "@pipeline().parameters.database",
									"type": "Expression"
								},
								"targetSchema": {
									"value": "@pipeline().parameters.targetSchema",
									"type": "Expression"
								},
								"targetTable": {
									"value": "@pipeline().parameters.targetTable",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "vvtestadfdevsg"
					},
					"url": {
						"type": "string",
						"defaultValue": "vvtestadf-sname-sn.database.windows.net"
					},
					"username": {
						"type": "string",
						"defaultValue": "adfadmin"
					},
					"password": {
						"type": "string",
						"defaultValue": "Password123"
					},
					"database": {
						"type": "string",
						"defaultValue": "vvtestadf_dbname_sqldb"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "project_table"
					},
					"targetSchema": {
						"type": "string",
						"defaultValue": "dest_dbo"
					},
					"targetTable": {
						"type": "string",
						"defaultValue": "dest_project_table"
					},
					"fileSystem": {
						"type": "string",
						"defaultValue": "raw"
					},
					"directory": {
						"type": "string",
						"defaultValue": "jdbc"
					},
					"partitionColname": {
						"type": "string",
						"defaultValue": "meta_load"
					}
				},
				"variables": {
					"execution_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDDI_V01"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-07T06:35:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_incr_jdbc_sql_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate execution date",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "execution_date",
							"value": {
								"value": "@formatDateTime(utcNow(),'yyyy-MM-dd-hh-mm-ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Trigger Incremental JDBC",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate execution date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_incr_jdbc_sql_child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"url": {
									"value": "@pipeline().parameters.url",
									"type": "Expression"
								},
								"username": {
									"value": "@pipeline().parameters.username",
									"type": "Expression"
								},
								"password": {
									"value": "@pipeline().parameters.password",
									"type": "Expression"
								},
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"tablename": {
									"value": "@pipeline().parameters.tablename",
									"type": "Expression"
								},
								"storageAccount": {
									"value": "@pipeline().parameters.storageAccount",
									"type": "Expression"
								},
								"fileSystem": {
									"value": "@pipeline().parameters.fileSystem",
									"type": "Expression"
								},
								"directory": {
									"value": "@pipeline().parameters.directory",
									"type": "Expression"
								},
								"blobPartitionColumn": {
									"value": "@pipeline().parameters.partitionColname",
									"type": "Expression"
								},
								"executionDate": {
									"value": "@variables('execution_date')",
									"type": "Expression"
								},
								"database": {
									"value": "@pipeline().parameters.database",
									"type": "Expression"
								},
								"targetSchema": {
									"value": "@pipeline().parameters.targetSchema",
									"type": "Expression"
								},
								"targetTable": {
									"value": "@pipeline().parameters.targetTable",
									"type": "Expression"
								},
								"stageSchema": {
									"value": "@pipeline().parameters.stageSchema",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "vvtestadfdevsg"
					},
					"url": {
						"type": "string",
						"defaultValue": "vvtestadf-sname-sn.database.windows.net"
					},
					"username": {
						"type": "string",
						"defaultValue": "adfadmin"
					},
					"password": {
						"type": "string",
						"defaultValue": "Password123"
					},
					"database": {
						"type": "string",
						"defaultValue": "vvtestadf_dbname_sqldb"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "project_table"
					},
					"targetSchema": {
						"type": "string",
						"defaultValue": "dest_dbo"
					},
					"targetTable": {
						"type": "string",
						"defaultValue": "dest_project_table"
					},
					"fileSystem": {
						"type": "string",
						"defaultValue": "raw"
					},
					"directory": {
						"type": "string",
						"defaultValue": "jdbc"
					},
					"partitionColname": {
						"type": "string",
						"defaultValue": "meta_load"
					},
					"waterfallColumn": {
						"type": "string",
						"defaultValue": "Creationtime"
					},
					"waterfallLookbackDays": {
						"type": "int",
						"defaultValue": 0
					},
					"stageSchema": {
						"type": "string",
						"defaultValue": "stage_dbo"
					}
				},
				"variables": {
					"execution_date": {
						"type": "String"
					},
					"loadingbehaviour": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDDI_V01"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-21T10:23:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_jdbc_config_parser')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_configuration",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "select  config  from [controlTable].[TestMetadataControlTable] where sourceName = '@{pipeline().parameters.source}' and tableName = '@{pipeline().parameters.tableName}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "check_loading_statergy",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "get_configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "check_for_firstload_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).DataLoadingBehaviorSettings.dataLoadingBehavior)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "full",
									"activities": [
										{
											"name": "trigger_fullload",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_fullload_jdbc_sql_child",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"url": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.url)",
														"type": "Expression"
													},
													"username": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.username)",
														"type": "Expression"
													},
													"password": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.password)",
														"type": "Expression"
													},
													"schema": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.schema)",
														"type": "Expression"
													},
													"tablename": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.table)",
														"type": "Expression"
													},
													"storageAccount": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.storageAccount)",
														"type": "Expression"
													},
													"fileSystem": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.fileSystem)",
														"type": "Expression"
													},
													"directory": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.directory)",
														"type": "Expression"
													},
													"blobPartitionColumn": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.partitionColName)",
														"type": "Expression"
													},
													"executionDate": {
														"value": "@pipeline().parameters.execution_date",
														"type": "Expression"
													},
													"database": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.database)",
														"type": "Expression"
													},
													"targetSchema": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.targetSchema)",
														"type": "Expression"
													},
													"targetTable": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.targetTable)",
														"type": "Expression"
													},
													"fileName": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.fileName)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "incr",
									"activities": [
										{
											"name": "increment_load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_incr_jdbc_sql_child",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"url": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.url)",
														"type": "Expression"
													},
													"username": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.username)",
														"type": "Expression"
													},
													"password": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.password)",
														"type": "Expression"
													},
													"schema": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.schema)",
														"type": "Expression"
													},
													"tablename": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.table)",
														"type": "Expression"
													},
													"storageAccount": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.storageAccount)",
														"type": "Expression"
													},
													"fileSystem": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.fileSystem)",
														"type": "Expression"
													},
													"directory": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.directory)",
														"type": "Expression"
													},
													"blobPartitionColumn": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.partitionColName)",
														"type": "Expression"
													},
													"executionDate": {
														"value": "@pipeline().parameters.execution_date",
														"type": "Expression"
													},
													"database": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SourceObjectSettings.database)",
														"type": "Expression"
													},
													"targetSchema": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.targetSchema)",
														"type": "Expression"
													},
													"targetTable": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.targetTable)",
														"type": "Expression"
													},
													"watermarkColumnName": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).DataLoadingBehaviorSettings.watermarkColumnName)",
														"type": "Expression"
													},
													"watermarkLookbackDays": {
														"value": "@int(json(activity('get_configuration').output.resultSets[0].rows[0].config).DataLoadingBehaviorSettings.watermarkLookbackDays)",
														"type": "Expression"
													},
													"stageSchema": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.stageSchema)",
														"type": "Expression"
													},
													"lastSuccessExecDate": {
														"value": "@variables('lastSuccessFullExecDate')",
														"type": "Expression"
													},
													"firstload": {
														"value": "@pipeline().parameters.firstload",
														"type": "Expression"
													},
													"primaryKey": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).DataLoadingBehaviorSettings.primaryKey)",
														"type": "Expression"
													},
													"fileName": {
														"value": "@string(json(activity('get_configuration').output.resultSets[0].rows[0].config).SinkObjectSettings.fileName)",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "update_ingestion_status_success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "check_loading_statergy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "Delete from [controlTable].[TestPipelineRun] where sourceName = '@{pipeline().parameters.source}' and TableName='@{pipeline().parameters.tableName}' and ExecDate = '@{pipeline().parameters.execution_date}';\nInsert into [controlTable].[TestPipelineRun] (sourceName,TableName,Status,ExecDate,LastSuccessfullExecDate) values('@{pipeline().parameters.source}','@{pipeline().parameters.tableName}','Success','@{pipeline().parameters.execution_date}','@{pipeline().parameters.execution_date}')\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "update_ingestion_status_fail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "check_loading_statergy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "Delete from [controlTable].[TestPipelineRun] where sourceName = '@{pipeline().parameters.source}' and TableName='@{pipeline().parameters.tableName}' and ExecDate = '@{pipeline().parameters.execution_date}';\nInsert into [controlTable].[TestPipelineRun] (sourceName,TableName,Status,ExecDate,LastSuccessfullExecDate) values('@{pipeline().parameters.source}','@{pipeline().parameters.tableName}','Failed','@{pipeline().parameters.execution_date}',@{variables('lastSuccessFullExecDate')})\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "check_for_firstload_flag",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.firstload,'F')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "get_lastsuccessfull_execution_date_first",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "select '-1' as last_success_date",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "firstload_set_last_success_executiondate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "get_lastsuccessfull_execution_date_first",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "lastSuccessFullExecDate",
										"value": {
											"value": "'@{activity('get_lastsuccessfull_execution_date_first').output.resultSets[0].rows[0].last_success_date}'",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "get_lastsuccessfull_execution_date",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "select coalesce(max(LastSuccessfullExecDate),'-1') as last_success_date from [controlTable].[TestPipelineRun] where sourceName = '@{pipeline().parameters.source}' and   TableName = '@{pipeline().parameters.tableName}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "normal_load_last_successrun",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "get_lastsuccessfull_execution_date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "lastSuccessFullExecDate",
										"value": {
											"value": "'@{activity('get_lastsuccessfull_execution_date').output.resultSets[0].rows[0].last_success_date}'",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"execution_date": {
						"type": "string"
					},
					"source": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					},
					"firstload": {
						"type": "string",
						"defaultValue": "F"
					}
				},
				"variables": {
					"loadingbehaviour": {
						"type": "String"
					},
					"lastSuccessFullExecDate": {
						"type": "String"
					},
					"foroutput": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDDI_V01"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-22T09:54:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_master_orch_jdbc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "generate_batch_execution_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[controlTable].[GetExecutionDateV05]",
								"storedProcedureParameters": {
									"execdate": {
										"type": "String",
										"value": null
									},
									"firstload": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.firstload",
											"type": "Expression"
										}
									},
									"previousrunstatus": {
										"type": "String",
										"value": null
									},
									"sourcename": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourcename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_mddi_controlTable_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "get_list_of_objects_to_be_ingested",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "generate_batch_execution_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[controlTable].[GetListOfObjects]",
								"storedProcedureParameters": {
									"previousrunstatus": {
										"type": "String",
										"value": {
											"value": "@activity('generate_batch_execution_date').output.firstRow.previousrunstatus",
											"type": "Expression"
										}
									},
									"retryfailedflag": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.retryfailedflag",
											"type": "Expression"
										}
									},
									"sourcename": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourcename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_mddi_controlTable_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "iterate_through_each_object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_list_of_objects_to_be_ingested",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_list_of_objects_to_be_ingested').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "get_object_level_config",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_jdbc_config_parser",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"execution_date": {
												"value": "@activity('generate_batch_execution_date').output.firstRow.execdate",
												"type": "Expression"
											},
											"source": {
												"value": "@pipeline().parameters.sourcename",
												"type": "Expression"
											},
											"tableName": {
												"value": "@item().tableName",
												"type": "Expression"
											},
											"firstload": {
												"value": "@pipeline().parameters.firstload",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string"
					},
					"firstload": {
						"type": "string"
					},
					"retryfailedflag": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDDI_V01"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-22T10:03:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_jdbc_config_parser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source1_subsequentload')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_master_orch_jdbc",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourcename": "[parameters('source1_subsequentload_properties_pl_master_orch_jdbc_parameters_sourcename')]",
							"firstload": "[parameters('source1_subsequentload_properties_pl_master_orch_jdbc_parameters_firstload')]",
							"retryfailedflag": "[parameters('source1_subsequentload_properties_pl_master_orch_jdbc_parameters_retryfailedflag')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-05-28T10:39:00",
						"endTime": "2024-05-28T10:54:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_master_orch_jdbc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source1_trigger_firstload')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_master_orch_jdbc",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourcename": "[parameters('source1_trigger_firstload_properties_pl_master_orch_jdbc_parameters_sourcename')]",
							"firstload": "[parameters('source1_trigger_firstload_properties_pl_master_orch_jdbc_parameters_firstload')]",
							"retryfailedflag": "[parameters('source1_trigger_firstload_properties_pl_master_orch_jdbc_parameters_retryfailedflag')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-05-28T16:46:00",
						"endTime": "2024-05-28T17:30:00",
						"timeZone": "India Standard Time",
						"schedule": {}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_master_orch_jdbc')]"
			]
		}
	]
}