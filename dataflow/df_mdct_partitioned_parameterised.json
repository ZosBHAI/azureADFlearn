{
	"name": "df_mdct_partitioned_parameterised",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "readJDBC"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_AzureDataLakeStorage2",
						"type": "LinkedServiceReference"
					},
					"name": "writer"
				}
			],
			"transformations": [
				{
					"name": "addMetaloadDate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Destination1 as string ('dfpartitioned'),",
				"     cw_schema as string ('dbo'),",
				"     cw_table as string,",
				"     fileStore as string ('landing')",
				"}",
				"source(output(",
				"          Project as string,",
				"          Creationtime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: ($cw_schema),",
				"     tableName: ($cw_table),",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     partitionBy('roundRobin', 2)) ~> readJDBC",
				"readJDBC derive(meta_load_dttm = toString(currentTimestamp(),'yyyy-MM-dd-hh-mm-ss')) ~> addMetaloadDate",
				"addMetaloadDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: ($fileStore),",
				"     folderPath: ($Destination1),",
				"     compressionCodec: 'snappy',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          meta_load_dttm",
				"     )) ~> writer"
			]
		}
	}
}